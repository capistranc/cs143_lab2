package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate pred;
    private DbIterator left;
    private DbIterator right;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.pred = p;
        this.left = child1;
        this.right = child2;
    }

    public JoinPredicate getJoinPredicate() {
        return this.pred;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        TupleDesc temp = this.left.getTupleDesc();

        if (this.pred.getField1() > temp.numFields())
            return temp.getFieldName(this.pred.getField1() );
        else
            return null; //error 
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        TupleDesc temp = this.right.getTupleDesc();

        if (this.pred.getField2() > temp.numFields())
            return temp.getFieldName(this.pred.getField2());
        else
            return null; //error 
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        TupleDesc td1 = this.left.getTupleDesc();
        TupleDesc td2 = this.right.getTupleDesc();
        return TupleDesc.merge(td1,td2);
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        this.left.open();
        this.right.open();
    }

    public void close() {
        super.close();
        this.left.close();
        this.right.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        
        this.left.rewind();
        this.right.rewind();
        this.tup1 = null; //This must be set to null on rewind, otherwise on attempting to
        //fetch next from our joined set, it was fetchNext starting from the last value of
        //tup1 instead of the first tuple.
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    //Because the iterator is incremented everytime we run right.next() we have to
    //store the value of the tuple in right.next in order to check it against
    //every tuple in the right iterator.

    private Tuple tup1 = null;

    protected Tuple fetchNext() throws TransactionAbortedException, DbException {

        Tuple t1 = null;
        Tuple t2 = null;

        if (tup1 != null) 
        {
            while (this.right.hasNext()) 
            {
                t2 = this.right.next();

                if (this.pred.filter(tup1, t2)) {
                    return joinTuples(tup1, t2);
                }
            }
        }


        while (this.left.hasNext() )
        {
            t1 = this.left.next();
            this.right.rewind();
    
            while (this.right.hasNext()) 
            {
                t2 = this.right.next();

                if (this.pred.filter(t1, t2))
                {
                    this.tup1 = t1;
                    return joinTuples(t1, t2);
                }
            }
    
        }
        return null;
    }

    Tuple joinTuples(Tuple t1, Tuple t2) {

        Tuple joint = new Tuple(this.getTupleDesc());

        int numField1 = t1.getTupleDesc().numFields();
        int numField2 = t2.getTupleDesc().numFields();

        for (int i = 0; i < numField1; i++) 
        {
            joint.setField(i, t1.getField(i));
        }

        for (int i = 0; i < numField2; i++) 
        {
            joint.setField(numField1 + i, t2.getField(i));
        }
        //System.out.println(joint.toString());

        return joint;
    }


    @Override
    public DbIterator[] getChildren() {
        DbIterator[] children = new DbIterator[2];
        children[0] = this.left;
        children[1] = this.right;
        return children;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        if (children.length > 1) {
            this.left = children[0];
            this.right = children[1];
        }
    }

}
